name: Functional Tests

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        description: "Python version"
        type: string
        default: "3.10"
      tox-version:
        required: false
        description: |
          Tox version, which should be used. The latest
          3.x version will be used by default.
        type: string
        default: "<4"
      working-directory:
        required: false
        description: "To change working directory"
        type: string
        default: "."
      timeout-minutes:
        required: false
        description: "Configurable timeout limit for functional tests job"
        type: number
        default: 60
      snapcraft:
        required: false
        description: |
          Flag if snap is tested. If set to true, snapcraft will be installed.
        type: boolean
        default: false
      command:
        required: false
        description: "Command to run functional tests with"
        type: string
        default: "make functional"
      # actions-operator
      provider:
        required: false
        type: string
        default: "lxd"
      nested-containers:
        required: false
        type: boolean
        default: false
      juju-channel:
        required: false
        type: string
        default: "2.9/stable"
      # runs-on for self-hosted runner
      # workaround from: https://github.com/orgs/community/discussions/11692#discussioncomment-3541856
      runs-on:
        required: false
        type: string
        default: "['self-hosted']"
        description: "JSON format list of labels for runs-on"
      action-operator:
        required: false
        type: boolean
        default: true
        description: "Use action-operator to setup environment or not"
      external-controller:
        required: false
        type: boolean
        default: false
        description: "Use external juju controller or not"
      lxd-channel:
        required: false
        type: string
        default: "latest/stable"
        description: "snap channel for lxd regardless of provider, installed via snap"
      juju-controller:
        required: false
        type: string
        default: ""
        description: "External juju controller name to use"
      pytest-env:
        required: false
        type: string
        description: "Extra pytest environment for pytest, base64 encoded env file"
      zaza-yaml:
        required: false
        type: string
        description: "Extra zaza yaml, base64 encoded yaml string"
    secrets:
      juju-controllers-yaml:
        required: false
        description: "A base64 encoded controllers.yaml file to use"
      juju-accounts-yaml:
        required: false
        description: "A base64 encoded accounts.yaml file to use"
      openstack-auth-env:
        required: false
        description: |
          A base64 encoded openstack authentication env file.

jobs:
  func:
    name: Functional tests
    runs-on: ${{ fromJson(inputs.runs-on) }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          python -m pip install "tox${{ inputs.tox-version }}"
      - name: Setup Juju ${{ inputs.juju-channel }} environment
        if: ${{ inputs.action-operator }}
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: ${{ inputs.provider }}
          juju-channel: ${{ inputs.juju-channel }}
      - name: Install snapcraft
        if: ${{ inputs.snapcraft }}
        run: sudo snap install snapcraft --classic
      - name: Enabled nested LXD containers
        if: ${{ inputs.provider == 'lxd' && inputs.nested-containers }}
        run: |
          # create new lxd project and configure nesting & privileged
          lxc profile show default > default-lxc-profile.yaml
          lxc project create nested-lxd
          lxc profile edit --project nested-lxd default < default-lxc-profile.yaml
          lxc profile set --project nested-lxd default security.nesting=true
          lxc profile set --project nested-lxd default security.privileged=true
          # set default project to be nested-lxd project
          juju model-default project=nested-lxd
      - name: external controller juju config
        if: ${{ inputs.external-controller }}
        run: |
          mkdir -p $HOME/.local/share/juju
          echo ${{ secrets.juju-controllers-yaml }} | base64 -d > $HOME/.local/share/juju/controllers.yaml
          echo ${{ secrets.juju-accounts-yaml }} | base64 -d > $HOME/.local/share/juju/accounts.yaml
      - name: external controller lxd config
        if: ${{ inputs.external-controller }}
        run: |
          sudo apt update -yqq
          sudo apt remove -qy lxd
          if [[ $(cat /etc/os-release | grep VERSION_CODENAME) == *"focal"* ]]; then
            sudo apt remove -qy lxd-client
          fi
          sudo snap install lxd --channel ${{ inputs.lxd-channel }}
          sudo lxd waitready
          sudo lxd init --auto
          sudo chmod a+wr /var/snap/lxd/common/lxd/unix.socket
          lxc network set lxdbr0 ipv6.address none
          sudo usermod -a -G lxd $USER
          if [[ $(cat /etc/os-release | grep VERSION_CODENAME) == *"jammy"* ]]; then
            sudo iptables -F FORWARD
            sudo iptables -P FORWARD ACCEPT
          fi
      - name: external controller openstack environment
        if: ${{ inputs.external-controller }}
        run: |
           # Workaround because github workflow doesn't allow to use secrets key
           # word in an if conditional expression.
           if [ "${{ secrets.openstack-auth-env }}" != '' ]; then
             # Add mask to secret
             # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-masking-a-generated-output-within-a-single-job
             echo ${{ secrets.openstack-auth-env }} \
                | base64 -d \
                | grep -E 'OS_AUTH_URL|OS_USERNAME|OS_PASSWORD|OS_PROJECT_NAME|OS_PROJECT_ID' \
                | awk -F'=' '{print $2}' \
                | xargs -I {} echo "::add-mask::{}"
             echo ${{ secrets.openstack-auth-env }} | base64 -d >> "$GITHUB_ENV"
           else
             echo "Skip because missing openstack-auth-env secrets"
           fi
      - name: pytest env
        if: ${{ inputs.pytest-env }}
        run: |
           echo ${{ inputs.pytest-env }} | base64 -d >> "$GITHUB_ENV"
      - name: zaza yaml
        if: ${{ inputs.zaza-yaml }}
        run: |
           echo ${{ inputs.zaza-yaml }} | base64 -d >> $HOME/.zaza.yaml
      - name: external controller required package
        if: ${{ inputs.external-controller }}
        run: |
           # unzip is needed because some of the legacy charm require unzip in Makefile
           sudo apt install -y unzip
           sudo snap install charmcraft --channel latest/stable --classic
           sudo snap install juju --channel ${{ inputs.juju-channel }}
           sudo --preserve-env=http_proxy,https_proxy,no_proxy pip3 install tox
           juju switch ${{ inputs.juju-controller }}
           # Workaround to avoid missing cookies bug
           # https://github.com/search?q=repo%3Ajuju%2Fpython-libjuju%20cookies_for_controller&type=code
           juju show-controller ${{ inputs.juju-controller }} &>/dev/null
      - name: Show juju information
        run: |
          juju version
          juju controllers | grep Version -A 1 | awk '{print $9}'
      - name: Show snap information
        run: |
          snap list
      - name: Run tests with `${{ inputs.command }}`
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.command }}
